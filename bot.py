from telethon import TelegramClient, events
from telethon.tl.types import PeerChannel, PeerChat
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

api_id = 23246373  # –í–∞—à api_id
api_hash = 'daa39e9d5b1bc1261b0c3e27853205fc'  # –í–∞—à api_hash
client = TelegramClient('my_session', api_id, api_hash)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
keywords = ['–º–æ–Ω—Ç–∞–∂', '–º–æ–Ω—Ç–∞–∂–µ—Ä', '–º–æ–Ω—Ç–∞–∂—ë—Ä', '–µ–∫–±', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–º–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫', '–º–≥–Ω']
excluded_words = ['–ø–æ–º–æ–≥—É', '–∏—â—É—Ä–∞–±–æ—Ç—É', '—é—Ç—É–±—à–æ—Ä—Ç—Å', '—Ä–∏–ª—Å', '–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ', '—à–æ—Ä—Ç—Å—ã', '—Ä–∏–ª—Å—ã']

# –ß–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
target_chat_id = -4734945370  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

@client.on(events.NewMessage)
async def handler(event):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sender = event.message.to_id
        sender_id = None

        if isinstance(sender, PeerChannel):
            sender_id = -sender.channel_id  # –∫–∞–Ω–∞–ª—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID
        elif isinstance(sender, PeerChat):
            sender_id = sender.chat_id  # –æ–±—ã—á–Ω—ã–µ —á–∞—Ç—ã: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞, –∫—É–¥–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if sender_id == target_chat_id:
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        text = event.raw_text.lower()
        if any(word in text for word in keywords) and not any(bad in text for bad in excluded_words):
            await client.send_message(
                target_chat_id,
                f'üì• –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {event.chat.title or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"}:\n\n{text}'
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ {event.chat.title}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
client.start()
client.run_until_disconnected()
